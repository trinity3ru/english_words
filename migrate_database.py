"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
"""

import sqlite3
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_database():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    db_path = "english_learning.db"
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ phrases
            cursor.execute("PRAGMA table_info(phrases)")
            columns = [column[1] for column in cursor.fetchall()]
            print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {columns}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü is_learned –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'is_learned' not in columns:
                print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü 'is_learned'...")
                cursor.execute("ALTER TABLE phrases ADD COLUMN is_learned BOOLEAN DEFAULT 0")
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'is_learned' –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'is_learned' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü total_progress_score –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'total_progress_score' not in columns:
                print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü 'total_progress_score'...")
                cursor.execute("ALTER TABLE phrases ADD COLUMN total_progress_score REAL DEFAULT 0.0")
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'total_progress_score' –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'total_progress_score' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_learned = 0 –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—Ä–∞–∑
            cursor.execute("UPDATE phrases SET is_learned = 0 WHERE is_learned IS NULL")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º total_progress_score = 0.0 –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—Ä–∞–∑
            cursor.execute("UPDATE phrases SET total_progress_score = 0.0 WHERE total_progress_score IS NULL")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            updated_rows = cursor.rowcount
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("PRAGMA table_info(phrases)")
            final_columns = [column[1] for column in cursor.fetchall()]
            print(f"üìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {final_columns}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("SELECT COUNT(*) FROM phrases")
            total_phrases = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM phrases WHERE is_learned = 1")
            learned_phrases = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM phrases WHERE is_learned = 0")
            active_phrases = cursor.fetchone()[0]
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            print(f"  –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {total_phrases}")
            print(f"  –ò–∑—É—á–µ–Ω–æ: {learned_phrases}")
            print(f"  –ê–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—Ç—Å—è: {active_phrases}")
            
            conn.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    migrate_database()
