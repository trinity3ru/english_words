"""
–§–∞–π–ª: telegram_bot.py

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–∑ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–≤–µ—Ç–æ–≤.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ AI –∏ –≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    –ö–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –¥–ª—è aiogram –≤–µ—Ä—Å–∏–∏ 3.x.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:

–ö–ª–∞—Å—Å—ã:
    - EnglishLearningBot: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

–§—É–Ω–∫—Ü–∏–∏:
    - start_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
    - help_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π.
    - phrase_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phrase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã.
    - reverse_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reverse –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑—ã.
    - sync_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sync –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets.
    - auto_command(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
    - handle_answer(message): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º.
    - get_random_phrase(): –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    - save_user_answer(phrase_id, user_answer, ai_score): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ü–µ–Ω–∫—É AI.
    - auto_send_phrase(user_id): –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    - auto_sync_google_sheets(): –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å Google Sheets.
    - stats_command(message): –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑.
    - start_auto_send_task(bot): –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
    - _get_score_emoji(score): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏.

–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:
    - BOT_COMMANDS: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    - AUTO_SEND_INTERVAL_HOURS: –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Å–∞—Ö (20).
    - AUTO_SEND_ENABLED: –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    - AUTO_SYNC_INTERVAL_HOURS: –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö (6).
    - AUTO_SYNC_ENABLED: –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    - WELCOME_MESSAGE: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    - HELP_MESSAGE: –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    - aiogram>=3.0.0
    - src.database
    - src.ai_analysis
    - config.config
    - logging
    - asyncio
"""

# region –ò–º–ø–æ—Ä—Ç—ã
import logging
import random
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict, Set
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from src.database import DatabaseManager
from src.ai_analysis import AIAnalyzer
from src.google_sync import GoogleSheetsSync
from config.config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, GOOGLE_SHEETS_CREDENTIALS_FILE, GOOGLE_SHEETS_SPREADSHEET_ID

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"[DEBUG] GOOGLE_SHEETS_CREDENTIALS_FILE: {GOOGLE_SHEETS_CREDENTIALS_FILE}")
print(f"[DEBUG] GOOGLE_SHEETS_SPREADSHEET_ID: {GOOGLE_SHEETS_SPREADSHEET_ID}")
print(f"[DEBUG] TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}")
print(f"[DEBUG] OPENAI_API_KEY: {OPENAI_API_KEY}")
# endregion

# region –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_COMMANDS = [
    ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    ("phrase", "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"),
    ("reverse", "–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"),
    ("sync", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã —Å Google Sheets"),
    ("auto", "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ—Ä–∞–∑"),
    ("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è"),
    ("interval", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–∞—Å—ã)")
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
AUTO_SEND_INTERVAL_HOURS = 20  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö
AUTO_SEND_ENABLED = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
AUTO_SYNC_INTERVAL_HOURS = 6  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
AUTO_SYNC_ENABLED = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ

WELCOME_MESSAGE = """
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-—Å–∏—Å—Ç–µ–º—É –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É  
/phrase - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /phrase, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!
"""

HELP_MESSAGE = """
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/phrase - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ñ—Ä–∞–∑—É
/reverse - –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã —Å Google Sheets
/auto - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ—Ä–∞–∑
/interval - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —á–∞—Å–∞—Ö)

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ –∏–∑ Google Sheets
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /phrase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ñ—Ä–∞–∑—ã
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reverse –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑—ã
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –æ—Ç–≤–µ—Ç
5. AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –¥–∞—Å—Ç –æ—Ü–µ–Ω–∫—É
6. –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑:** –∫–∞–∂–¥—ã–µ 20 —á–∞—Å–æ–≤ –±–æ—Ç —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É
‚Ä¢ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:** –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –±–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—ã –∏–∑ Google Sheets
‚Ä¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ **–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ:** –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è

üìä **–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ `/stats` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è
‚Ä¢ `/sync` - –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ Google Sheets
‚Ä¢ `/auto` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

üéØ –¶–µ–ª—å: –≤—ã—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ—Ä–∞–∑ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!
"""
# endregion

# region –ö–ª–∞—Å—Å EnglishLearningBot
class EnglishLearningBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""
        self.logger = logging.getLogger(__name__)
        self.logger.info("[START_FUNCTION][__init__] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnglishLearningBot")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.database = DatabaseManager()
        self.ai_analyzer = AIAnalyzer()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # user_id -> {phrase_id, english_phrase, russian_translation, exercise_type}
        # exercise_type: 'translate_to_russian' –∏–ª–∏ 'translate_to_english'
        self.expected_answers = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.auto_send_enabled = AUTO_SEND_ENABLED
        self.auto_send_interval = timedelta(hours=AUTO_SEND_INTERVAL_HOURS)
        self.last_auto_send = {}  # user_id -> datetime –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.auto_send_task = None  # –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.auto_sync_enabled = AUTO_SYNC_ENABLED
        self.auto_sync_interval = timedelta(hours=AUTO_SYNC_INTERVAL_HOURS)
        self.last_auto_sync = None  # datetime –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.auto_sync_task = None  # –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        self.logger.info("[END_FUNCTION][__init__] EnglishLearningBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # endregion FUNCTION __init__
    
    # region FUNCTION start_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
    # Returns:
    #   - None
    # Side Effects:
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /start: –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WELCOME_MESSAGE.
    
    async def start_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.logger.info(f"[START_FUNCTION][start_command] –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(WELCOME_MESSAGE, parse_mode='Markdown')
        
        self.logger.info(f"[END_FUNCTION][start_command] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    
    # endregion FUNCTION start_command
    
    # region FUNCTION help_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /help.
    # Returns:
    #   - None
    # Side Effects:
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /help: –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å HELP_MESSAGE.
    
    async def help_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        self.logger.info(f"[START_FUNCTION][help_command] –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(HELP_MESSAGE, parse_mode='Markdown')
        
        self.logger.info(f"[END_FUNCTION][help_command] –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    
    # endregion FUNCTION help_command
    
    # region FUNCTION phrase_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /phrase.
    # Returns:
    #   - None
    # Side Effects:
    #   - –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    #   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ self.expected_answers.
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /phrase: –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    async def phrase_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /phrase - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."""
        user_id = message.from_user.id
        self.logger.info(f"[START_FUNCTION][phrase_command] –ö–æ–º–∞–Ω–¥–∞ /phrase –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        phrase_data = self.get_random_phrase()
        
        if not phrase_data:
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.logger.warning(f"[WARNING][phrase_command] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        phrase_id, english_phrase, russian_translation = phrase_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
        self.expected_answers[user_id] = {
            'phrase_id': phrase_id,
            'english_phrase': english_phrase,
            'russian_translation': russian_translation,
            'exercise_type': 'translate_to_russian'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—Ä–∞–∑–æ–π
        message_text = f"üá¨üáß **–ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**\n\n{english_phrase}\n\nüí° **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫**"
        
        await message.answer(message_text)
        
        self.logger.info(f"[END_FUNCTION][phrase_command] –§—Ä–∞–∑–∞ {phrase_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    # endregion FUNCTION phrase_command
    
    # region FUNCTION reverse_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /reverse.
    # Returns:
    #   - None
    # Side Effects:
    #   - –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    #   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ self.expected_answers.
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /reverse: –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    async def reverse_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reverse - –ø–æ–ª—É—á–∞–µ—Ç —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
        user_id = message.from_user.id
        self.logger.info(f"[START_FUNCTION][reverse_command] –ö–æ–º–∞–Ω–¥–∞ /reverse –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        phrase_data = self.get_random_phrase()
        
        if not phrase_data:
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.logger.warning(f"[WARNING][reverse_command] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        phrase_id, english_phrase, russian_translation = phrase_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç (–æ–±—Ä–∞—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ)
        self.expected_answers[user_id] = {
            'phrase_id': phrase_id,
            'english_phrase': english_phrase,
            'russian_translation': russian_translation,
            'exercise_type': 'translate_to_english'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑–æ–π
        message_text = f"üá∑üá∫ **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:**\n\n{russian_translation}\n\nüí° **–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**"
        
        await message.answer(message_text)
        
        self.logger.info(f"[END_FUNCTION][reverse_command] –†—É—Å—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ {phrase_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    # endregion FUNCTION reverse_command
    
    # region FUNCTION sync_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /sync.
    # Returns:
    #   - None
    # Side Effects:
    #   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å Google Sheets.
    #   - –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /sync: –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
    
    async def sync_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /sync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å Google Sheets."""
        user_id = message.from_user.id
        self.logger.info(f"[START_FUNCTION][sync_command] –ö–æ–º–∞–Ω–¥–∞ /sync –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not GOOGLE_SHEETS_CREDENTIALS_FILE or not GOOGLE_SHEETS_SPREADSHEET_ID:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets")
                self.logger.error("[ERROR][sync_command] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
            sync = GoogleSheetsSync(
                credentials_path=GOOGLE_SHEETS_CREDENTIALS_FILE,
                spreadsheet_id=GOOGLE_SHEETS_SPREADSHEET_ID,
                database_manager=self.database
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_before = sync.get_sync_status()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            result = sync.full_sync()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_after = sync.get_sync_status()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"""‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑: {result['added']}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ—Ä–∞–∑: {result['updated']}
‚Ä¢ –û—à–∏–±–æ–∫: {result['errors']}
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['total']}

üìà **–°—Ç–∞—Ç—É—Å:**
‚Ä¢ –§—Ä–∞–∑ –≤ Google Sheets: {status_after['sheets_count']}
‚Ä¢ –§—Ä–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {status_after['database_count']}
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {status_after['sync_percentage']}%

üéØ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /phrase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑!"""
            
            await message.answer(report, parse_mode='Markdown')
            
            self.logger.info(f"[END_FUNCTION][sync_command] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
            await message.answer(error_msg)
            self.logger.error(f"[ERROR][sync_command] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # endregion FUNCTION sync_command
    
    # region FUNCTION auto_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /auto.
    # Returns:
    #   - None
    # Side Effects:
    #   - –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –∫–æ–º–∞–Ω–¥–æ–π /auto: –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    
    async def auto_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /auto - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ—Ä–∞–∑."""
        user_id = message.from_user.id
        self.logger.info(f"[START_FUNCTION][auto_command] –ö–æ–º–∞–Ω–¥–∞ /auto –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.last_auto_send:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            self.last_auto_send[user_id] = datetime.now()
            self.auto_send_enabled = True
            status = "–≤–∫–ª—é—á–µ–Ω–∞"
            next_send = datetime.now() + self.auto_send_interval
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.auto_send_enabled:
                self.auto_send_enabled = False
                status = "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                next_send = "–Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è"
            else:
                self.auto_send_enabled = True
                self.last_auto_send[user_id] = datetime.now()
                status = "–≤–∫–ª—é—á–µ–Ω–∞"
                next_send = datetime.now() + self.auto_send_interval
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.auto_send_enabled:
            current_hours = int(self.auto_send_interval.total_seconds() // 3600)
            message_text = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {status}!**

‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ {current_hours} —á–∞—Å–æ–≤
üìÖ **–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:** {next_send.strftime('%d.%m.%Y –≤ %H:%M') if isinstance(next_send, datetime) else next_send}

üí° –ë–æ—Ç –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å."""
        else:
            message_text = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {status}!**

üí° –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã.
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å."""
        
        await message.answer(message_text, parse_mode='Markdown')
        
        self.logger.info(f"[END_FUNCTION][auto_command] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # endregion FUNCTION auto_command

    # region FUNCTION interval_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /interval [—á–∞—Å—ã?].
    # Returns:
    #   - None
    # Side Effects:
    #   - –û–±–Ω–æ–≤–ª—è–µ—Ç self.auto_send_interval –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ/–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    # Raises:
    #   - None
    # Tests:
    #   - "/interval": –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
    #   - "/interval 12": —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 12 —á–∞—Å–æ–≤, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.
    #   - "/interval 0"/"/interval abc": –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    async def interval_command(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Å–∞—Ö."""
        self.logger.info(f"[START_FUNCTION][interval_command] –ö–æ–º–∞–Ω–¥–∞ /interval –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        text = message.text.strip() if message.text else "/interval"
        parts = text.split(maxsplit=1)

        if len(parts) == 1:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_hours = int(self.auto_send_interval.total_seconds() // 3600)
            await message.answer(
                f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏: {current_hours} —á–∞—Å–æ–≤.\n"
                f"–ò–∑–º–µ–Ω–∏—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/interval <—á–∞—Å—ã>`, –Ω–∞–ø—Ä–∏–º–µ—Ä `/interval 12`.",
                parse_mode='Markdown'
            )
            self.logger.info(f"[END_FUNCTION][interval_command] –ü–æ–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_hours} —á")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        arg = parts[1].strip()
        try:
            new_hours = int(arg)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/interval 12`.", parse_mode='Markdown')
            self.logger.warning(f"[WARNING][interval_command] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}")
            return

        if new_hours < 1 or new_hours > 168:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤.", parse_mode='Markdown')
            self.logger.warning(f"[WARNING][interval_command] –ß–∞—Å—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {new_hours}")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.auto_send_interval = timedelta(hours=new_hours)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        user_id = message.from_user.id
        if self.auto_send_enabled:
            if user_id not in self.last_auto_send:
                next_send_text = "–≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /auto"
            else:
                next_send_time = self.last_auto_send[user_id] + self.auto_send_interval
                next_send_text = next_send_time.strftime('%d.%m.%Y –≤ %H:%M')
        else:
            next_send_text = "–∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (/auto)"

        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_hours} —á–∞—Å–æ–≤.\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_send_text}",
            parse_mode='Markdown'
        )

        self.logger.info(f"[END_FUNCTION][interval_command] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: {new_hours} —á")
    # endregion FUNCTION interval_command
    
    # region FUNCTION stats_command
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # Returns:
    #   - None
    # Side Effects:
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # Raises:
    #   - None
    # Tests:
    #   - –ö–æ–º–∞–Ω–¥–∞ /stats: –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è
    
    async def stats_command(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è."""
        user_id = message.from_user.id
        self.logger.info(f"[START_FUNCTION][stats_command] –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
            stats = self.database.get_learned_phrases_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞**

üìö **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —Ñ—Ä–∞–∑ –≤ –±–∞–∑–µ: {stats['total_phrases']}
‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ñ—Ä–∞–∑: {stats['learned_phrases']} ‚úÖ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—Ç—Å—è: {stats['active_phrases']} üìñ

üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑—É—á–µ–Ω–∏—è: **{stats['learning_percentage']}%**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∏–∑—É—á–µ–Ω–Ω—ã—Ö: {stats['avg_learned_score']}

üéØ **–¶–µ–ª—å:** –¥–æ—Å—Ç–∏—á—å 100% –∏–∑—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—Ä–∞–∑!

üí° **–°–æ–≤–µ—Ç:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /phrase –∏ /reverse –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏."""
            
            await message.answer(stats_message, parse_mode='Markdown')
            
            self.logger.info(f"[END_FUNCTION][stats_command] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.answer(error_message)
            self.logger.error(f"[ERROR][stats_command] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # endregion FUNCTION stats_command
    
    # region FUNCTION handle_answer
    # CONTRACT
    # Args:
    #   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ—Ä–∞–∑—É.
    # Returns:
    #   - None
    # Side Effects:
    #   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI.
    #   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    # Raises:
    #   - None
    # Tests:
    #   - message —Å –æ—Ç–≤–µ—Ç–æ–º: –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ AI –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫.
    
    async def handle_answer(self, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ—Ä–∞–∑—É."""
        user_id = message.from_user.id
        user_answer = message.text
        
        self.logger.info(f"[START_FUNCTION][handle_answer] –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.expected_answers:
            await message.answer("üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ñ—Ä–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /phrase –∏–ª–∏ /reverse!")
            self.logger.info(f"[INFO][handle_answer] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ—Ä–∞–∑–µ
        expected_data = self.expected_answers[user_id]
        phrase_id = expected_data['phrase_id']
        english_phrase = expected_data['english_phrase']
        russian_translation = expected_data['russian_translation']
        exercise_type = expected_data.get('exercise_type', 'translate_to_russian')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
        try:
            if exercise_type == 'translate_to_english':
                # –û–±—Ä–∞—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                ai_score = self.ai_analyzer.analyze_reverse_answer(
                    russian_phrase=russian_translation,
                    english_translation=english_phrase,
                    user_answer=user_answer
                )
            else:
                # –û–±—ã—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
                ai_score = self.ai_analyzer.analyze_answer(
                    english_phrase=english_phrase,
                    russian_translation=russian_translation,
                    user_answer=user_answer
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.save_user_answer(phrase_id, user_answer, ai_score['score'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            score_emoji = self._get_score_emoji(ai_score['score'])
            score_feedback = ai_score.get('feedback', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')

            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∏–¥–µ–∞–ª–µ–Ω)
            correct_variant = None
            if ai_score.get('score', 0.0) < 1.0:
                if exercise_type == 'translate_to_english':
                    correct_variant = english_phrase
                else:
                    correct_variant = russian_translation

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
            error_analysis = ai_score.get('error_analysis', {})
            meaning_errors = error_analysis.get('meaning_errors', [])
            lexical_errors = error_analysis.get('lexical_errors', [])
            grammar_errors = error_analysis.get('grammar_errors', [])
            punctuation_errors = error_analysis.get('punctuation_errors', [])
            style_differences = error_analysis.get('style_differences', [])

            # –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç AI
            alternatives = ai_score.get('alternatives', [])[:3]
            usage_examples = ai_score.get('usage_examples', [])[:2]
            mini_dialogue = ai_score.get('mini_dialogue', [])[:4]
            note = ai_score.get('note', '').strip()
            suggestions = ai_score.get('suggestions', [])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            next_command = "/reverse" if exercise_type == 'translate_to_russian' else "/phrase"
            next_command_text = "—Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑—ã" if exercise_type == 'translate_to_russian' else "–∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ñ—Ä–∞–∑—ã"
            
            # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            parts = []
            parts.append(f"{score_emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\nüìù **–í–∞—à –æ—Ç–≤–µ—Ç:** {user_answer}\nüéØ **–û—Ü–µ–Ω–∫–∞:** {ai_score['score']:.1f}/1.0\nüí° **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {score_feedback}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏)
            if any([meaning_errors, lexical_errors, grammar_errors, punctuation_errors, style_differences]):
                parts.append("üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:**")
                
                if meaning_errors:
                    meaning_block = "\n".join([f"- {e}" for e in meaning_errors])
                    parts.append(f"üéØ **–°–º—ã—Å–ª–æ–≤—ã–µ –æ—à–∏–±–∫–∏:**\n{meaning_block}")
                
                if lexical_errors:
                    lexical_block = "\n".join([f"- {e}" for e in lexical_errors])
                    parts.append(f"üìö **–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:**\n{lexical_block}")
                
                if grammar_errors:
                    grammar_block = "\n".join([f"- {e}" for e in grammar_errors])
                    parts.append(f"üìù **–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:**\n{grammar_block}")
                
                if punctuation_errors:
                    punct_block = "\n".join([f"- {e}" for e in punctuation_errors])
                    parts.append(f"‚úèÔ∏è **–ü—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:**\n{punct_block}")
                
                if style_differences:
                    style_block = "\n".join([f"- {e}" for e in style_differences])
                    parts.append(f"üé® **–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–ª–∏—á–∏—è:**\n{style_block}")
            
            if correct_variant:
                parts.append(f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:** {correct_variant}")
            if alternatives:
                alt_block = "\n".join([f"- {a}" for a in alternatives])
                parts.append(f"üîÑ **–ö–∞–∫ –µ—â—ë –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å:**\n{alt_block}")
            if usage_examples:
                ex_block = "\n".join([f"- {e}" for e in usage_examples])
                parts.append(f"‚úçÔ∏è **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n{ex_block}")
            if mini_dialogue:
                dlg_block = "\n".join([f"- {d}" for d in mini_dialogue])
                parts.append(f"üó£ **–ú–∏–Ω–∏-–¥–∏–∞–ª–æ–≥:**\n{dlg_block}")
            if note:
                parts.append(f"‚ÑπÔ∏è **–ó–∞–º–µ—Ç–∫–∞:** {note}")
            if suggestions:
                sug_block = "\n".join([f"- {s}" for s in suggestions])
                parts.append(f"üß© **–ü–æ–¥—Å–∫–∞–∑–∫–∏:**\n{sug_block}")
            parts.append(f"\nüîÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {next_command} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π {next_command_text}!")
            result_message = "\n\n".join(parts)
            
            await message.answer(result_message, parse_mode='Markdown')
            
            # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
            del self.expected_answers[user_id]
            
            self.logger.info(f"[END_FUNCTION][handle_answer] –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ—Ü–µ–Ω–∫–∞: {ai_score}")
            
        except Exception as e:
            self.logger.error(f"[ERROR][handle_answer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # endregion FUNCTION handle_answer
    
    # region FUNCTION get_random_phrase
    # CONTRACT
    # Args:
    #   - None
    # Returns:
    #   - Optional[Tuple[int, str, str]]: (phrase_id, english_phrase, russian_translation) –∏–ª–∏ None.
    # Side Effects:
    #   - –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    # Raises:
    #   - None
    # Tests:
    #   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑—ã.
    #   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None.
    
    def get_random_phrase(self) -> Optional[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("[START_FUNCTION][get_random_phrase] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            phrases = self.database.get_all_phrases()
            
            if not phrases:
                self.logger.warning("[WARNING][get_random_phrase] –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ—Ä–∞–∑")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
            random_phrase = random.choice(phrases)
            phrase_id = random_phrase['id']
            english_phrase = random_phrase['phrase']  # english_text
            russian_translation = random_phrase.get('context', '')  # –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
            self.logger.info(f"[END_FUNCTION][get_random_phrase] –ü–æ–ª—É—á–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ {phrase_id}: {english_phrase}")
            return phrase_id, english_phrase, russian_translation
            
        except Exception as e:
            self.logger.error(f"[ERROR][get_random_phrase] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã: {e}")
            return None
    
    # endregion FUNCTION get_random_phrase
    
    # region FUNCTION save_user_answer
    # CONTRACT
    # Args:
    #   - phrase_id: ID —Ñ—Ä–∞–∑—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    #   - user_answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    #   - ai_score: –û—Ü–µ–Ω–∫–∞ AI (–æ—Ç 0.0 –¥–æ 1.0).
    # Returns:
    #   - None
    # Side Effects:
    #   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    # Raises:
    #   - None
    # Tests:
    #   - –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    def save_user_answer(self, phrase_id: int, user_answer: str, ai_score: float) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ü–µ–Ω–∫—É AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info(f"[START_FUNCTION][save_user_answer] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—Ä–∞–∑—ã {phrase_id}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ update_progress
            # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id = 1 (–¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            user_id = 1
            is_learned = self.database.update_progress(user_id, phrase_id, ai_score, user_answer)
            
            if is_learned:
                self.logger.info(f"[INFO][save_user_answer] –§—Ä–∞–∑–∞ {phrase_id} –≤—ã—É—á–µ–Ω–∞!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã
            try:
                from config.config import LEARNED_SCORE_THRESHOLD
                
                # –ü–†–û–ì–†–ï–°–° –û–ë–ù–û–í–õ–Ø–ï–¢–°–Ø –í _update_google_sheets_progress
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ update_phrase_progress
                # became_learned = self.database.update_phrase_progress(phrase_id, ai_score)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª–∞ –ª–∏ —Ñ—Ä–∞–∑–∞ –∏–∑—É—á–µ–Ω–Ω–æ–π (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Google Sheets)
                # –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ _update_google_sheets_progress
                
            except Exception as e:
                self.logger.error(f"[ERROR][save_user_answer] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ñ—Ä–∞–∑—ã: {e}")
            
            # üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª –≤ Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            try:
                self._update_google_sheets_progress(phrase_id, ai_score)
                self.logger.info(f"[INFO][save_user_answer] –ë–∞–ª–ª {ai_score} –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets –¥–ª—è —Ñ—Ä–∞–∑—ã {phrase_id}")
            except Exception as e:
                self.logger.error(f"[ERROR][save_user_answer] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            
            self.logger.info(f"[END_FUNCTION][save_user_answer] –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ—Ä–∞–∑—ã {phrase_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"[ERROR][save_user_answer] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # endregion FUNCTION save_user_answer
    
    # region FUNCTION _update_google_sheets_progress
    # CONTRACT
    # Args:
    #   - phrase_id: ID —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    #   - ai_score: –ë–∞–ª–ª AI (–æ—Ç 0.0 –¥–æ 1.0)
    # Returns:
    #   - None
    # Side Effects:
    #   - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü Progress –≤ Google Sheets
    # Raises:
    #   - Exception: –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    # Tests:
    #   - phrase_id –≤–∞–ª–∏–¥–Ω—ã–π, ai_score –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets
    
    def _update_google_sheets_progress(self, phrase_id: int, ai_score: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ—Ä–∞–∑—ã –≤ Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Google Sync —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            from src.google_sync import GoogleSheetsSync
            from config.config import GOOGLE_SHEETS_CREDENTIALS_FILE, GOOGLE_SHEETS_SPREADSHEET_ID
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            google_sync = GoogleSheetsSync(
                credentials_path=GOOGLE_SHEETS_CREDENTIALS_FILE,
                spreadsheet_id=GOOGLE_SHEETS_SPREADSHEET_ID
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ—Ä–∞–∑—ã –∏–∑ –ë–î
            current_progress = self.database.get_phrase_progress(phrase_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–ª –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É
            new_total_progress = current_progress + ai_score
            
            # –û–ë–ù–û–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–£–Æ –ë–î (–≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –≤—ã—à–µ)
            became_learned = self.database.update_phrase_progress(phrase_id, ai_score)
            
            if became_learned:
                self.logger.info(f"[INFO][_update_google_sheets_progress] –§—Ä–∞–∑–∞ {phrase_id} –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–æ—Ä–æ–≥–∞ –∏–∑—É—á–µ–Ω–∏—è!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            google_sync.update_phrase_progress_in_sheets(phrase_id, new_total_progress)
            
            self.logger.info(f"[INFO][_update_google_sheets_progress] Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω: —Ñ—Ä–∞–∑–∞ {phrase_id}, –ø—Ä–æ–≥—Ä–µ—Å—Å: {new_total_progress}")
            
        except ImportError:
            self.logger.warning("[WARNING][_update_google_sheets_progress] Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.logger.error(f"[ERROR][_update_google_sheets_progress] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
            raise e
    
    # endregion FUNCTION _update_google_sheets_progress
    
    # region FUNCTION _get_score_emoji
    # CONTRACT
    # Args:
    #   - score: –û—Ü–µ–Ω–∫–∞ AI (–æ—Ç 0.0 –¥–æ 1.0).
    # Returns:
    #   - str: –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏.
    # Side Effects:
    #   - None
    # Raises:
    #   - None
    # Tests:
    #   - score=0.0: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "‚ùå".
    #   - score=0.3: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "üòê".
    #   - score=0.5: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "üôÇ".
    #   - score=0.7: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "üòä".
    #   - score=1.0: –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å "üéâ".
    
    def _get_score_emoji(self, score: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏ AI."""
        if score == 0.0:
            return "‚ùå"
        elif score <= 0.2:
            return "üòû"
        elif score <= 0.4:
            return "üòê"
        elif score <= 0.6:
            return "üôÇ"
        elif score <= 0.8:
            return "üòä"
        elif score <= 0.9:
            return "üòÑ"
        else:
            return "üéâ"
    
    # endregion FUNCTION _get_score_emoji
    
    # region FUNCTION auto_send_phrase
    # CONTRACT
    # Args:
    #   - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã.
    # Returns:
    #   - None
    # Side Effects:
    #   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    #   - –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
    # Raises:
    #   - None
    # Tests:
    #   - user_id –≤–∞–ª–∏–¥–Ω—ã–π: –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è.
    
    async def auto_send_phrase(self, user_id: int) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if not self.auto_send_enabled:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if user_id in self.last_auto_send:
                time_since_last = datetime.now() - self.last_auto_send[user_id]
                if time_since_last < self.auto_send_interval:
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
            phrase_data = self.get_random_phrase()
            if not phrase_data:
                return
            
            phrase_id, english_phrase, russian_translation = phrase_data
            
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            exercise_type = random.choice(['translate_to_russian', 'translate_to_english'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
            self.expected_answers[user_id] = {
                'phrase_id': phrase_id,
                'english_phrase': english_phrase,
                'russian_translation': russian_translation,
                'exercise_type': exercise_type
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            if exercise_type == 'translate_to_russian':
                message_text = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**

üá¨üáß **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:**

{english_phrase}

üí° **–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**"""
            else:
                message_text = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**

üá∑üá∫ **–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:**

{russian_translation}

üí° **–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
            # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å bot –≤ –º–µ—Ç–æ–¥
            if hasattr(self, 'bot'):
                await self.bot.send_message(user_id, message_text, parse_mode='Markdown')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_auto_send[user_id] = datetime.now()
            
            self.logger.info(f"[INFO][auto_send_phrase] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ {phrase_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            self.logger.error(f"[ERROR][auto_send_phrase] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # endregion FUNCTION auto_send_phrase
    
    # region FUNCTION auto_sync_google_sheets
    # CONTRACT
    # Args:
    #   - None
    # Returns:
    #   - None
    # Side Effects:
    #   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å Google Sheets.
    #   - –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    #   - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑–∞—Ö.
    # Raises:
    #   - None
    # Tests:
    #   - Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω: –¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–≤–µ–¥–æ–º–∏—Ç—å.
    
    async def auto_sync_google_sheets(self) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å Google Sheets."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if not self.auto_sync_enabled:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if self.last_auto_sync:
                time_since_last = datetime.now() - self.last_auto_sync
                if time_since_last < self.auto_sync_interval:
                    return
            
            self.logger.info("[INFO][auto_sync_google_sheets] –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not GOOGLE_SHEETS_CREDENTIALS_FILE or not GOOGLE_SHEETS_SPREADSHEET_ID:
                self.logger.warning("[WARNING][auto_sync_google_sheets] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
            sync = GoogleSheetsSync(
                credentials_path=GOOGLE_SHEETS_CREDENTIALS_FILE,
                spreadsheet_id=GOOGLE_SHEETS_SPREADSHEET_ID,
                database_manager=self.database
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_before = sync.get_sync_status()
            phrases_before = status_before.get('database_count', 0)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            result = sync.full_sync()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_after = sync.get_sync_status()
            phrases_after = status_after.get('database_count', 0)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.last_auto_sync = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
            new_phrases = phrases_after - phrases_before
            
            if new_phrases > 0:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑–∞—Ö
                notification_message = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–ù–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã:** +{new_phrases}
üìà **–í—Å–µ–≥–æ —Ñ—Ä–∞–∑ –≤ –±–∞–∑–µ:** {phrases_after}
‚è∞ **–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:** {self.last_auto_sync.strftime('%d.%m.%Y –≤ %H:%M')}

üéØ –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!"""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id in list(self.last_auto_send.keys()):
                    try:
                        if hasattr(self, 'bot'):
                            await self.bot.send_message(user_id, notification_message, parse_mode='Markdown')
                    except Exception as e:
                        self.logger.error(f"[ERROR][auto_sync_google_sheets] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                self.logger.info(f"[INFO][auto_sync_google_sheets] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª–µ–Ω–æ {new_phrases} –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑")
            else:
                self.logger.info("[INFO][auto_sync_google_sheets] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"[ERROR][auto_sync_google_sheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    # endregion FUNCTION auto_sync_google_sheets
    
    # region FUNCTION start_auto_send_task
    # CONTRACT
    # Args:
    #   - bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    # Returns:
    #   - None
    # Side Effects:
    #   - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
    # Raises:
    #   - None
    # Tests:
    #   - bot –≤–∞–ª–∏–¥–Ω—ã–π: –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    
    def start_auto_send_task(self, bot: Bot) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        self.bot = bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        async def auto_tasks_loop():
            """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
            while True:
                try:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
                    await self.auto_sync_google_sheets()
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    for user_id in list(self.last_auto_send.keys()):
                        await self.auto_send_phrase(user_id)
                    
                    # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(3600)  # 1 —á–∞—Å
                    
                except Exception as e:
                    self.logger.error(f"[ERROR][auto_tasks_loop] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}")
                    await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        try:
            loop = asyncio.get_event_loop()
            self.auto_send_task = loop.create_task(auto_tasks_loop())
            self.logger.info("[INFO][start_auto_send_task] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")
        except RuntimeError:
            # –ï—Å–ª–∏ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            self.auto_send_task = asyncio.create_task(auto_tasks_loop())
            self.logger.info("[INFO][start_auto_send_task] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ")
    
    # endregion FUNCTION start_auto_send_task
    
    # region FUNCTION setup_handlers
    # CONTRACT
    # Args:
    #   - dp: –≠–∫–∑–µ–º–ø–ª—è—Ä Dispatcher –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    # Returns:
    #   - None
    # Side Effects:
    #   - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    # Raises:
    #   - None
    # Tests:
    #   - dp —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.
    
    def setup_handlers(self, dp: Dispatcher) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞."""
        self.logger.info("[START_FUNCTION][setup_handlers] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.message.register(self.start_command, Command("start"))
        dp.message.register(self.help_command, Command("help"))
        dp.message.register(self.phrase_command, Command("phrase"))
        dp.message.register(self.reverse_command, Command("reverse")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reverse
        dp.message.register(self.sync_command, Command("sync")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /sync
        dp.message.register(self.auto_command, Command("auto")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /auto
        dp.message.register(self.stats_command, Command("stats")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stats
        dp.message.register(self.interval_command, Command("interval")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /interval
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dp.message.register(self.handle_answer, F.text)
        
        self.logger.info("[END_FUNCTION][setup_handlers] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # endregion FUNCTION setup_handlers

# endregion –ö–ª–∞—Å—Å EnglishLearningBot

# region –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def create_and_run_bot() -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logging.info("[START_FUNCTION][create_and_run_bot] –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        dp = Dispatcher()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        english_bot = EnglishLearningBot()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        english_bot.setup_handlers(dp)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ—Ä–∞–∑
        english_bot.start_auto_send_task(bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
        logging.info("[END_FUNCTION][create_and_run_bot] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logging.error(f"[ERROR][create_and_run_bot] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

# endregion –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

# region –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    import asyncio
    asyncio.run(create_and_run_bot())
# endregion
